---
/**
 * Props:
 *  - title: string
 *  - description?: string
 *  - date: Date (o string parseable)   // solo fecha (YYYY-MM-DD)
 *  - start: string "HH:MM"
 *  - end: string "HH:MM"
 *  - location?: string
 *  - tz?: string (por defecto "America/Bogota")
 */
interface Props {
    title: string;
    description?: string;
    date: string | Date;
    start: string;
    end: string;
    location?: string;
    tz?: string;
}
const {
    title,
    description = '',
    date,
    start,
    end,
    location = '',
    tz = 'America/Bogota',
} = Astro.props;

// helpers
function pad2(n: number) {
    return String(n).padStart(2, '0');
}

function parseDate(input: string | Date) {
// Acepta string 'YYYY-MM-DD' o Date
  if (typeof input === 'string') {
    const [y, m, d] = input.split('-').map(Number);
    return new Date(y, (m ?? 1) - 1, d ?? 1); // <-- LOCAL (no UTC)
  }
  if (input instanceof Date) {
    // Si vino de z.coerce.date() (UTC), usamos getters UTC para recuperar el YMD original,
    // y creamos una fecha LOCAL con esos componentes.
    return new Date(
      input.getUTCFullYear(),
      input.getUTCMonth(),
      input.getUTCDate()
    );
  }
  return new Date(input);
}

// Construye YYYYMMDD y tiempo local YYYYMMDDTHHMMSS (sin Z).
function buildLocalDateTime(dateLike: string | Date, timeStr: string) {
    const d = parseDate(dateLike);
    const [h, m = '0'] = String(timeStr).replace('.', ':').split(':');
    const yyyy = d.getFullYear();
    const MM = pad2(d.getMonth() + 1);
    const DD = pad2(d.getDate());
    const HH = pad2(Number(h));
    const mm = pad2(Number(m));
    const ss = '00';
    const ymd = `${yyyy}${MM}${DD}`;
    const ymdThms = `${ymd}T${HH}${mm}${ss}`;
    return { ymd, ymdThms };
}

const { ymd, ymdThms: startLocal } = buildLocalDateTime(date, start);
const { ymdThms: endLocal } = buildLocalDateTime(date, end);

// GOOGLE CALENDAR URL
// Formato: https://calendar.google.com/calendar/render?action=TEMPLATE&text=...&details=...&location=...&dates=YYYYMMDDTHHMMSS/YYYYMMDDTHHMMSS&ctz=America/Bogota
const gcalUrl =
    `https://calendar.google.com/calendar/render?action=TEMPLATE` +
    `&text=${encodeURIComponent(title)}` +
    `&details=${encodeURIComponent(description)}` +
    `&location=${encodeURIComponent(location)}` +
    `&dates=${startLocal}/${endLocal}` +
    `&ctz=${encodeURIComponent(tz)}`;

// ICS (Apple/Outlook) — con TZID, línea dura y minimal.
const uid = `${ymd}-${startLocal}-${encodeURIComponent(title).slice(0, 32)}@qff`;
const ics = `BEGIN:VCALENDAR
VERSION:2.0
PRODID:-//QFF//Schedule//ES
CALSCALE:GREGORIAN
BEGIN:VEVENT
UID:${uid}
SUMMARY:${title.replace(/\n/g, ' ')}
DESCRIPTION:${description.replace(/\n/g, ' ')}
DTSTART;TZID=${tz}:${startLocal}
DTEND;TZID=${tz}:${endLocal}
LOCATION:${location.replace(/\n/g, ' ')}
STATUS:CONFIRMED
END:VEVENT
END:VCALENDAR`.replace(/\r?\n/g, '\r\n'); // línea CRLF por compatibilidad

const icsDataUri = `data:text/calendar;charset=utf-8,${encodeURIComponent(ics)}`;
---

<div class='atc'>
    <a class='btn btn-gcal' href={gcalUrl} target='_blank' rel='noopener'>
        Añadir a Google Calendar
    </a>
    <a class='btn btn-ics' href={icsDataUri} download={`evento_${ymd}.ics`}>
        Descargar .ics
    </a>
</div>

<style>
    .atc {
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
        margin-top: 0.6rem;
    }
    .btn {
        display: inline-flex;
        align-items: center;
        gap: 8px;
        padding: 0.25rem 0.65rem;
        border-radius: 10px;
        text-decoration: none;
        background: var(--gris, #f3f3f3);
        color: #ffffff86;
        font-size: 0.875rem;
        transition:
            transform 0.15s ease,
            box-shadow 0.2s ease,
            background 0.2s ease,
            border-color 0.2s ease;
    }
    .btn:hover {
        background: rgba(255, 255, 255, 0.301);
    }
    .btn-gcal,
    .btn-ics {
        background: rgba(255, 255, 255, 0.089);
    }
</style>
